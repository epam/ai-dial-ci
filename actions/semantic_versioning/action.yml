name: "Calculate version"
description: "Calculate version based on semantic versioning @ conventional commits"

outputs:
  current-version:
    description: "Current version"
    value: ${{ steps.semantic.outputs.current-version }}
  next-version:
    description: "Next version"
    value: ${{ steps.semantic.outputs.next-version }}
  next-version-without-hyphens:
    description: "Next version without hyphens. Useful for python packages"
    value: ${{ steps.semantic.outputs.next-version-without-hyphens }}
  is-latest:
    description: "Is a version semantically latest compared to the latest git tag?"
    value: ${{ steps.semantic.outputs.is-latest }}
  latest-tag:
    description: "Semantically latest git tag in the repository"
    value: ${{ steps.semantic.outputs.latest-tag }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
    - name: Calculate version
      id: semantic
      shell: bash
      run: |
        #!/bin/bash
        # set -x

        function version { echo "$@" | awk -F. '{ printf("%d%03d%03d\n", $1,$2,$3); }'; }

        function bump_version {
          # Split the version string into Major, Minor and Patch numbers
          local VERSION
          IFS='.' read -r -a VERSION <<<"${1}"
          local BRANCH_NAME="$2"
          local MAJOR=${VERSION[0]}
          local MINOR=${VERSION[1]}
          local PATCH=${VERSION[2]}

          # Increment the version number
          if [[ "$BRANCH_NAME" == "development" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
            rc="-rc"
          elif [[ "$BRANCH_NAME" =~ "release-" ]]; then
            PATCH=$((PATCH + 1))
            rc=""
          fi

          # Build the new version string
          echo "${MAJOR}.${MINOR}.${PATCH}${rc}"
        }

        CURRENT_BRANCH=$(git symbolic-ref -q HEAD)
        CURRENT_BRANCH=${CURRENT_BRANCH##refs/heads/}
        CURRENT_BRANCH=${CURRENT_BRANCH:-HEAD}
        git fetch --tags

        TAGS=$(git tag)

        if [[ -z "${TAGS// /}" ]]; then
          # No tags found
          if [[ "$CURRENT_BRANCH" == "development" ]]; then
            # For development branch with no tags, set the next version to 0.1.0-rc
            NEXT_VERSION="0.1.0-rc"
          elif [[ "$CURRENT_BRANCH" =~ "release-" ]]; then
            NEXT_VERSION="${CURRENT_BRANCH#'release-'}.0"
          fi
        else
          # Tags found
          if [[ "$CURRENT_BRANCH" == "development" ]]; then
            CURRENT_VERSION=$(git tag | sort -V | tail -1)
            NEXT_VERSION=$(bump_version "${CURRENT_VERSION}" "${CURRENT_BRANCH}")
          elif [[ "${CURRENT_BRANCH}" =~ "release-" ]]; then
            # For release branch with tags, bump patch version, e.g. v2.3.4 -> v2.3.5
            CURRENT_VERSION=$(git tag | { grep "^${CURRENT_BRANCH##release-}." || echo ''; } | sort -V | tail -1)
            if [[ -n "${CURRENT_VERSION// /}" ]]; then
              NEXT_VERSION=$(bump_version "${CURRENT_VERSION}" "${CURRENT_BRANCH}")
            else
              # If no tags match the release branch, set the next version to release number with 0 patch version, e.g. v-0.1.0
              NEXT_VERSION="${CURRENT_BRANCH##release-}.0"
            fi
          else
            exit 2
          fi
        fi

        # Check if the next version is greater than the latest tag in the repo
        # Always false if NEXT_VERSION contains '-rc'
        LATEST_TAG=$(git tag | sort -V | tail -1)
        if [ "$(version "${NEXT_VERSION//*-/-}")" -gt "$(version "$LATEST_TAG")" ]; then
          IS_LATEST="true"
        else
          IS_LATEST="false"
        fi

        # python packages do not support semantic versioning
        NEXT_VERSION_WITHOUT_HYPHENS="${NEXT_VERSION//-/}"

        # Outputs to stdout and job summary
        OUTPUTS_SUMMARY=$(cat << EOF
        | Parameter                    | Value                         |
        | ---------------------------- | ----------------------------- |
        | current-version              | $CURRENT_VERSION              |
        | next-version                 | $NEXT_VERSION                 |
        | next-version-without-hyphens | $NEXT_VERSION_WITHOUT_HYPHENS |
        | latest-tag                   | $LATEST_TAG                   |
        | is-latest                    | $IS_LATEST                    |
        EOF
        )
        echo "$OUTPUTS_SUMMARY"
        echo "$OUTPUTS_SUMMARY" >> "$GITHUB_STEP_SUMMARY"

        # Outputs
        echo "current-version=${CURRENT_VERSION}" >>$GITHUB_OUTPUT
        echo "next-version=${NEXT_VERSION}" >>$GITHUB_OUTPUT
        echo "next-version-without-hyphens=${NEXT_VERSION_WITHOUT_HYPHENS}" >>$GITHUB_OUTPUT
        echo "latest-tag=${LATEST_TAG}" >>$GITHUB_OUTPUT
        echo "is-latest=${IS_LATEST}" >>$GITHUB_OUTPUT
