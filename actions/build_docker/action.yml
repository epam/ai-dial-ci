name: "Build docker"
description: "Build a docker image, tag it, (optionally) scan it, and (optionally) push it to Dockerhub and GHCR"
inputs:
  bypass-checks:
    description: "Do not fail pipeline if checks failed"
    default: "false"
  push-enabled:
    description: "Push the image to registry(ies)"
    required: false
    default: "false"
  trivy-enabled:
    description: "Enable Trivy scanning"
    required: false
    default: "true"
  trivy-severity:
    description: "Severities of vulnerabilities to fail the build"
    required: false
    default: "CRITICAL,HIGH"
  trivy-severity-for-sarif:
    description: "Severities of vulnerabilities in SARIF report"
    required: false
    default: "CRITICAL,HIGH"
  trivy-limit-severities-for-sarif:
    description: "Limit severities for SARIF format"
    required: false
    default: "true"
  trivy-vuln-type:
    description: "Type of vulnerabilities to scan"
    required: false
    default: "os,library"
  trivy-ignore-unfixed:
    description: "Ignore unpatched/unfixed vulnerabilities"
    required: false
    default: "true"
  image-name:
    description: "Name of the image to build"
    required: true
  image-tag:
    description: "Tag of the image to build"
    required: true
  image-extra-aliases:
    description: "Extra aliases for the image, e.g. to publish to multiple registries"
    required: false
    default: ""
  ghcr-username:
    description: "GitHub Container Registry username. This is required for pushing to GitHub Container Registry"
    required: false
    default: ${{ github.actor }}
  ghcr-password:
    description: "GitHub Container Registry password/token. This is required for pushing to GitHub Container Registry"
    required: false
    default: ""
  dockerhub-username:
    description: "Docker Hub username. This is required for pushing to Docker Hub"
    required: false
    default: ""
  dockerhub-password:
    description: "Docker Hub password/token. This is required for pushing to Docker Hub"
    required: false
    default: ""
  gpr-username:
    description: "GitHub Package Registry username (for pulling packages from image being built)"
    required: false
    default: ${{ github.actor }}
  gpr-password:
    required: false
    description: "GitHub Package Registry password/token (for pulling packages from image being built)"
    default: ""

runs:
  using: "composite"
  steps:
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
    - name: Login to GitHub Container Registry
      if: ${{ fromJSON(inputs.push-enabled) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr-username }}
        password: ${{ inputs.ghcr-password }}
    - name: Login to Docker Hub
      if: ${{ fromJSON(inputs.push-enabled) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-password }}
    - name: Build and export to Docker
      if: ${{ fromJSON(inputs.trivy-enabled) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
      with:
        context: .
        load: true
        tags: |
          ${{ inputs.image-name }}:${{ inputs.image-tag }}
          ${{ inputs.image-extra-aliases }}
        labels: |
          maintainer=AI DIAL
          org.opencontainers.image.title=${{ inputs.image-name }}
          org.opencontainers.image.version=${{ inputs.image-tag }}
          org.opencontainers.image.description=${{ inputs.image-name }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
        secrets: |
          GPR_USERNAME=${{ inputs.gpr-username }}
          GPR_PASSWORD=${{ inputs.gpr-password }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false
    - name: Run Trivy vulnerability scanner (SARIF, no fail)
      id: trivy-sarif
      # Do not perform SARIF scan on private repos - GitHub Advanced Security is not enabled
      if: ${{ fromJSON(inputs.trivy-enabled) && !github.event.repository.private }} # workaround for composite jobs not being able to pass boolean inputs
      uses: aquasecurity/trivy-action@7aca5acc9500b463826cc47a47a65ad7d404b045 # TODO: v0.31.0+
      with:
        image-ref: "${{ inputs.image-name }}:${{ inputs.image-tag }}"
        format: "sarif"
        exit-code: "0"
        output: "trivy-results.sarif"
        ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
        vuln-type: ${{ inputs.trivy-vuln-type }}
        severity: ${{ inputs.trivy-severity-for-sarif }}
        limit-severities-for-sarif: ${{ inputs.trivy-limit-severities-for-sarif }}
      env:
        TRIVY_DISABLE_VEX_NOTICE: true
      continue-on-error: true # HACK: Alongside with `exit-code: 0`, ensure not failing the workflow
    - name: Upload Trivy scan results to GitHub Security tab
      # Do not upload SARIF reports on private repos - GitHub Advanced Security is not enabled
      if: ${{ !cancelled() && fromJSON(inputs.trivy-enabled) && !github.event.repository.private }} # workaround for composite jobs not being able to pass boolean inputs
      uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b #v3.28.17
      with:
        sarif_file: "trivy-results.sarif"
        category: trivy
      env:
        CONTINUE_ON_ERROR: ${{ inputs.bypass-checks }} # Hack to use the input below as a boolean
      continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
    - name: Run Trivy vulnerability scanner (stdout, table view, may fail)
      if: ${{ fromJSON(inputs.trivy-enabled) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: aquasecurity/trivy-action@7aca5acc9500b463826cc47a47a65ad7d404b045 # TODO: v0.31.0+
      with:
        image-ref: "${{ inputs.image-name }}:${{ inputs.image-tag }}"
        format: "table"
        exit-code: "1"
        ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
        vuln-type: ${{ inputs.trivy-vuln-type }}
        severity: ${{ inputs.trivy-severity }}
        skip-setup-trivy: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
      env:
        CONTINUE_ON_ERROR: ${{ inputs.bypass-checks }} # Hack to use the input below as a boolean
        TRIVY_SKIP_DB_UPDATE: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
        TRIVY_SKIP_JAVA_DB_UPDATE: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
        TRIVY_DISABLE_VEX_NOTICE: true
      continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
    - name: Build and push
      if: ${{ fromJSON(inputs.push-enabled) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
      with:
        context: .
        push: true
        tags: |
          ${{ inputs.image-name }}:${{ inputs.image-tag }}
          ${{ inputs.image-extra-aliases }}
        labels: |
          maintainer=AI DIAL
          org.opencontainers.image.title=${{ inputs.image-name }}
          org.opencontainers.image.version=${{ inputs.image-tag }}
          org.opencontainers.image.description=${{ inputs.image-name }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
        secrets: |
          GPR_USERNAME=${{ inputs.gpr-username }}
          GPR_PASSWORD=${{ inputs.gpr-password }}
      env:
        DOCKER_BUILD_RECORD_UPLOAD: false
