name: "Build docker"
description: "Build a docker image, tag it, (optionally) scan it, and (optionally) push it to Dockerhub and GHCR"
inputs:
  bypass_checks:
    description: "Do not fail pipeline if checks failed"
    default: "false"
  push:
    description: "Push the image to the registry"
    required: false
    default: "false"
  scan:
    description: "Scan with Trivy"
    required: false
    default: "true"
  scan_severity:
    description: "Severity of vulnerabilities to fail the build"
    required: false
    default: "CRITICAL,HIGH"
  scan_vuln_type:
    description: "Type of vulnerabilities to scan"
    required: false
    default: "os,library"
  scan_ignore_unfixed:
    description: "Ignore unpatched/unfixed vulnerabilities"
    required: false
    default: "true"
  image_name:
    description: "Name of the image to build"
    required: true
  image_tag:
    description: "Tag of the image to build"
    required: true
  image_extra_aliases:
    description: "Extra aliases for the image, e.g. to publish to multiple registries"
    required: false
    default: ""
  ghcr_username:
    description: "GitHub Container Registry username"
    required: false
    default: ""
  ghcr_password:
    description: "GitHub Container Registry password"
    required: false
    default: ""
  dockerhub_username:
    description: "Docker Hub username"
    required: false
    default: ""
  dockerhub_password:
    description: "Docker Hub password"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Login to GitHub Container Registry
      if: ${{ fromJSON(inputs.push) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_password }}
    - name: Login to Docker Hub
      if: ${{ fromJSON(inputs.push) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}
    - name: Build and export to Docker
      if: ${{ fromJSON(inputs.scan) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
      with:
        context: .
        load: true
        tags: |
          ${{ inputs.image_name }}:${{ inputs.image_tag }}
          ${{ inputs.image_extra_aliases }}
        labels: |
          maintainer=AI DIAL
          org.opencontainers.image.title=${{ inputs.image_name }}
          org.opencontainers.image.version=${{ inputs.image_tag }}
          org.opencontainers.image.description=${{ inputs.image_name }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
    - name: Run Trivy vulnerability scanner (stdout, table view, no fail)
      if: ${{ fromJSON(inputs.scan) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: aquasecurity/trivy-action@fd25fed6972e341ff0007ddb61f77e88103953c2 # v0.21.0
      with:
        image-ref: "${{ inputs.image_name }}:${{ inputs.image_tag }}"
        format: "table"
        ignore-unfixed: ${{ inputs.scan_ignore_unfixed }}
        vuln-type: ${{ inputs.scan_vuln_type }}
        severity: ${{ inputs.scan_severity }}
      env:
        CONTINUE_ON_ERROR: ${{ inputs.bypass_checks }} # Hack to use the input below as a boolean
      continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
    - name: Run Trivy vulnerability scanner (SARIF, may fail)
      if: ${{ fromJSON(inputs.scan) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: aquasecurity/trivy-action@fd25fed6972e341ff0007ddb61f77e88103953c2 # v0.21.0
      with:
        image-ref: "${{ inputs.image_name }}:${{ inputs.image_tag }}"
        format: "sarif"
        output: "trivy-results.sarif"
        exit-code: "1"
        ignore-unfixed: ${{ inputs.scan_ignore_unfixed }}
        vuln-type: ${{ inputs.scan_vuln_type }}
        severity: ${{ inputs.scan_severity }}
        limit-severities-for-sarif: true
      env:
        CONTINUE_ON_ERROR: ${{ inputs.bypass_checks }} # Hack to use the input below as a boolean
      continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ !cancelled() && fromJSON(inputs.scan) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: github/codeql-action/upload-sarif@e8893c57a1f3a2b659b6b55564fdfdbbd2982911 #v3.24.0
      with:
        sarif_file: "trivy-results.sarif"
        category: trivy
      env:
        CONTINUE_ON_ERROR: ${{ inputs.bypass_checks }} # Hack to use the input below as a boolean
      continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
    - name: Build and push
      if: ${{ fromJSON(inputs.push) }} # workaround for composite jobs not being able to pass boolean inputs
      uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
      with:
        context: .
        push: true
        tags: |
          ${{ inputs.image_name }}:${{ inputs.image_tag }}
          ${{ inputs.image_extra_aliases }}
        labels: |
          maintainer=AI DIAL
          org.opencontainers.image.title=${{ inputs.image_name }}
          org.opencontainers.image.version=${{ inputs.image_tag }}
          org.opencontainers.image.description=${{ inputs.image_name }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
