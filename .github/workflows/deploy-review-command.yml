name: deploy-review-command
on:
  repository_dispatch:
    types: [deploy-review-command]
jobs:
  deploy-review:
    runs-on: ubuntu-latest
    steps:
      - name: Check repository owner
        id: owner
        run: |
          DISPATCHED_REPO_NAME=${{ github.event.client_payload.github.payload.repository.name }}
          DISPATCHED_REPO_OWNER=${{ github.event.client_payload.github.payload.repository.owner.login }}
          ERROR_MESSAGE=""
          if [[ "$DISPATCHED_REPO_OWNER" != "$GITHUB_REPOSITORY_OWNER" ]]; then
          ERROR_MESSAGE="The event was not dispatched by a repository within the same owner."
          fi
          if [[ "$DISPATCHED_REPO_NAME" != ai-dial* ]]; then
          ERROR_MESSAGE+=" The repository name does not start with 'ai-dial'."
          fi
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "status=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "All checks passed."
      - name: Checks and transformations
        id: vars
        run: |
          ERROR_MESSAGE=""
          if [[ -z "${{ github.event.client_payload.slash_command.args.named.application }}" ]]; then
            ERROR_MESSAGE="The 'application' argument is missing."
          fi
          if [[ -z "${{ github.event.client_payload.pull_request.number }}" ]]; then
            ERROR_MESSAGE+=" Pull request number is missing."
          fi
          if [[ -z "${{ github.event.client_payload.pull_request.head.repo.full_name }}" ]]; then
            ERROR_MESSAGE+=" Pull request head repo full name is missing."
          fi
          if [[ -z "${{ github.event.client_payload.pull_request.head.ref }}" ]]; then
            ERROR_MESSAGE+=" Pull request head ref is missing."
          fi
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "status=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "All required values are present."

      - name: Deploy environment
        id: deploy
        uses: digital-blueprint/gitlab-pipeline-trigger-action@7fef6b4967aef68a1671ccf42a6e45f7a27487d8 # v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          trigger_token: ${{ secrets.REVIEW_DEPLOY_TRIGGER_TOKEN }}
          access_token: ${{ secrets.REVIEW_DEPLOY_ACCESS_TOKEN }}
          id: ${{ secrets.REVIEW_DEPLOY_PROJECT_ID }}
          ref: ${{ secrets.REVIEW_DEPLOY_REF }}
          variables: >
            {
              "GITHUB_APP":"${{ github.event.client_payload.slash_command.args.named.application }}",
              "GITHUB_PR":"pr-${{ github.event.client_payload.pull_request.number }}",
              "GITHUB_REPO":"${{ github.event.client_payload.pull_request.head.repo.full_name }}",
              "GITHUB_REF":"${{ github.event.client_payload.pull_request.head.ref }}",
              "GITHUB_TRIGGER": "${{ github.event.client_payload.github.payload.comment.html_url }}"
            }

      - name: Check status
        id: status
        if: success() || failure()
        run: |
          GITHUB_WORKFLOW_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          GITLAB_PIPELINE_URL=${{ steps.deploy.outputs.web_url }}

          MESSAGE=""
          if [[ -n "${{ steps.owner.outputs.status }}" ]]; then
            MESSAGE+=">- **Owner check failed**: ${{ steps.owner.outputs.status }}\n"
          fi
          if [[ -n "${{ steps.vars.outputs.status }}" ]]; then
            MESSAGE+=">- **Vars check failed**: ${{ steps.vars.outputs.status }}\n"
          fi
          if [[ -n "${{ steps.deploy.outputs.status }}" && "${{ steps.deploy.outputs.status }}" != "success" ]]; then
            MESSAGE+=">- **Deployment failed**: [${{ steps.deploy.outputs.status }}](${GITLAB_PIPELINE_URL})\n"
          fi
          if [[ -z "${{ steps.owner.outputs.status }}" && -z "${{ steps.vars.outputs.status }}" && -z "${{ steps.deploy.outputs.status }}" ]]; then
            MESSAGE+=">Something went wrong, check [GitHub Workflow run output](${GITHUB_WORKFLOW_URL})\n"
          fi
          echo -e "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Environment URL
        if: success()
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            >Environment URL: https://chat-${{ github.event.client_payload.slash_command.args.named.application }}-pr-${{ github.event.client_payload.pull_request.number }}.nightly-test.deltixhub.io

      - name: Return status
        if: success() || failure()
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ steps.status.outputs.message }}

  set-test-branch:
    runs-on: ubuntu-latest
    outputs:
      test_branch: ${{ steps.set-branch.outputs.test_branch }}
    steps:
      - name: Set test branch
        id: set-branch
        run: |
          # For ai-dial-chat repo QA team want to run tests from PR branch
          if [ ${{ github.event.client_payload.github.payload.repository.name }} == "ai-dial-chat" ]; then
            echo "test_branch=${{ github.event.client_payload.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "test_branch=development" >> $GITHUB_OUTPUT
          fi

  e2e-test:
    uses: tataranovich/ai-dial-ci/.github/workflows/gh-e2e-test.yml@gh-e2e-test
    needs:
      - deploy-review
      - set-test-branch
    with:
      e2e-host: "https://chat-${{ github.event.client_payload.slash_command.args.named.application }}-pr-${{ github.event.client_payload.pull_request.number }}.nightly-test.deltixhub.io"
      next-public-overlay-host: "https://overlay-${{ github.event.client_payload.slash_command.args.named.application }}-pr-${{ github.event.client_payload.pull_request.number }}.nightly-test.deltixhub.io"
      e2e-workers: 6
      test-branch: ${{ needs.set-test-branch.outputs.test_branch }}
      entity-arithmetic-request-for-api-tests: '[{ "entityId": "gpt-35-turbo", "isSysPromptAllowed": "true" },{ "entityId": "gpt-35-turbo-16k", "isSysPromptAllowed": "true" },{ "entityId": "gpt-35-turbo-1106", "isSysPromptAllowed": "true" },{ "entityId": "gpt-35-turbo-0125", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-1106-preview", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-0125-preview", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-turbo-2024-04-09", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-turbo", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-32k-0314", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4-32k-0613", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4o-2024-05-13", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4o-2024-08-06", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4o-2024-11-20", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4o-mini-2024-07-18", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4.5-preview-2025-02-27", "isSysPromptAllowed": "true" },{ "entityId": "gpt-4.1-2025-04-14", "isSysPromptAllowed": "true" },{ "entityId": "o1-2024-12-17", "isSysPromptAllowed": "true" },{ "entityId": "o3-mini-2025-01-31", "isSysPromptAllowed": "true" },{ "entityId": "amazon.titan-tg1-large", "isSysPromptAllowed": "true" },{ "entityId": "us.deepseek.r1-v1", "isSysPromptAllowed": "true" },{ "entityId": "anthropic.claude-instant-v1", "isSysPromptAllowed": "true" },{ "entityId": "anthropic.claude-v2", "isSysPromptAllowed": "true" },{ "entityId": "anthropic.claude-v2-1", "isSysPromptAllowed": "true" },{ "entityId": "anthropic.claude-v3-haiku", "isSysPromptAllowed": "true" },{ "entityId": "anthropic.claude-v3-sonnet", "isSysPromptAllowed": "true" },{ "entityId": "meta.llama3-8b-instruct-v1", "isSysPromptAllowed": "true" },{ "entityId": "meta.llama3-70b-instruct-v1", "isSysPromptAllowed": "true" },{ "entityId": "chat-bison@001", "isSysPromptAllowed": "true" },{ "entityId": "chat-bison-32k@002", "isSysPromptAllowed": "true" },{ "entityId": "codechat-bison@001", "isSysPromptAllowed": "true" },{ "entityId": "codechat-bison-32k@002", "isSysPromptAllowed": "true" },{ "entityId": "gemini-pro", "isSysPromptAllowed": "true" },{ "entityId": "gemini-1.5-pro-preview-0409", "isSysPromptAllowed": "true" },{ "entityId": "gemini-1.5-flash-001", "isSysPromptAllowed": "true" },{ "entityId": "gemini-2.5-pro-preview-03-25", "isSysPromptAllowed": "true" },{ "entityId": "claude-3-7-sonnet@20250219", "isSysPromptAllowed": "true" }]'
      entity-plus-attachment-for-api-tests: '[{ "entityId": "gpt-4-vision-preview", "attachmentName": "sun.jpg", "response": "sun" },{ "entityId": "gemini-pro-vision", "attachmentName": "sun.jpg", "request": "what is on picture?", "response": "sun" }]'
      entity-simple-request-for-api-tests: '[{ "entityId": "stability.stable-diffusion-xl", "request": "draw smiling emoticon", "isAttachmentResponse": "true"}, { "entityId": "stability.stable-image-core-v1", "request": "draw smiling emoticon", "isAttachmentResponse": "true"}, { "entityId": "stability.stable-image-ultra-v1", "request": "draw smiling emoticon", "isAttachmentResponse": "true"}, { "entityId": "stability.sd3-large-v1", "request": "draw smiling emoticon", "isAttachmentResponse": "true"}, { "entityId": "dall-e-3", "request": "draw smiling emoticon", "isAttachmentResponse": "true"}, { "entityId": "imagegeneration@005", "request": "draw smiling emoticon", "isAttachmentResponse": "true"} ]'
      models-list-for-tests: '[{"entityId":"gpt-35-turbo"}, {"entityId":"gpt-35-turbo-1106"}, {"entityId":"gpt-35-turbo-16k"}, {"entityId":"gpt-35-turbo-0125"}, {"entityId":"gpt-4"}, {"entityId":"gpt-4-0613"}, {"entityId":"gpt-4-1106-preview"}, {"entityId":"gpt-4-0125-preview"}, {"entityId":"gpt-4-turbo-2024-04-09"}, {"entityId":"gpt-4-turbo"}, {"entityId":"gpt-4-32k"}, {"entityId":"gpt-4-32k-0314"}, {"entityId":"gpt-4-32k-0613"}, {"entityId":"gpt-4-vision-preview"}, {"entityId":"gpt-4o"}, {"entityId":"gpt-4o-2024-05-13"}, {"entityId": "gpt-4o-2024-08-06"}, {"entityId": "gpt-4o-2024-11-20"}, {"entityId": "gpt-4o-mini-2024-07-18"}, {"entityId": "gpt-4.5-preview-2025-02-27"}, {"entityId": "gpt-4.1-2025-04-14"}, {"entityId": "o1-2024-12-17"}, {"entityId": "o3-mini-2025-01-31"}, {"entityId": "chat-bison"}, {"entityId": "chat-bison@001"}, {"entityId": "chat-bison-32k@002"}, {"entityId": "codechat-bison"}, {"entityId": "codechat-bison@001"}, {"entityId": "codechat-bison-32k@002"}, {"entityId": "dall-e-3"}, {"entityId": "amazon.titan-tg1-large"}, {"entityId": "us.deepseek.r1-v1"}, {"entityId": "anthropic.claude"}, {"entityId": "anthropic.claude-instant-v1"}, {"entityId": "anthropic.claude-v2"}, {"entityId": "anthropic.claude-v2-1"}, {"entityId": "anthropic.claude-v3-sonnet"}, {"entityId": "anthropic.claude-v3-5-sonnet"}, {"entityId": "us.anthropic.claude-3-7-sonnet-20250219-v1"}, {"entityId": "anthropic.claude-v3-haiku"}, {"entityId": "anthropic.claude-v3-opus"}, {"entityId": "stability.stable-diffusion-xl"}, {"entityId": "imagegeneration@005"}, {"entityId": "gemini-1.5-pro-preview-0409"}, {"entityId": "gemini-1.5-flash-001"}, {"entityId": "gemini-2.5-pro-preview-03-25"}, {"entityId": "claude-3-7-sonnet@20250219"}, {"entityId": "gemini-pro-vision"}, {"entityId": "gemini-pro"}, {"entityId": "meta.llama3-8b-instruct-v1"}, {"entityId": "meta.llama3-70b-instruct-v1"}, {"entityId": "databricks-dbrx-instruct"}, {"entityId": "databricks-mixtral-8x7b-instruct"}, {"entityId": "stability.stable-image-core-v1"}, {"entityId": "stability.stable-image-ultra-v1"}, {"entityId": "stability.sd3-large-v1"}]'
      addons-list-for-tests: '[{"entityId":"addon-wolfram"}, {"entityId":"addon-xweather"}]'
      simple-request-model: 'gpt-35-turbo'
    secrets:
      E2E_ADMIN: ${{ secrets.E2E_ADMIN }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_OVERLAY_USERNAME: ${{ secrets.E2E_OVERLAY_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

  e2e-status:
    runs-on: ubuntu-latest
    needs: e2e-test
    if: success() || failure()
    steps:
      - uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            >E2E tests status: ${{ needs.e2e-test.outputs.status }}
