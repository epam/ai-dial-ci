name: Python Package Release workflow

on:
  workflow_call:
    inputs:
      bypass-checks:
        type: boolean
        default: false
        description: Do not fail pipeline if checks failed
      style-checks-enabled:
        type: boolean
        default: true
        description: Enable style_checks
      style-checks-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if style_checks failed
      code-checks-enabled:
        type: boolean
        default: true
        description: Enable code_checks
      code-checks-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if code_checks failed
      code-checks-python-versions:
        type: string
        description: Python versions to run tests against
        default: '["3.8", "3.9", "3.10", "3.11"]'
      ort-enabled:
        type: boolean
        default: true
        description: Enable ORT scanning
      ort-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if ORT scan failed
      ort-version:
        type: string
        default: "latest"
        description: ORT version to use
      trivy-enabled:
        type: boolean
        default: true
        description: Enable Trivy scanning
      trivy-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if Trivy failed
      trivy-severity:
        type: string
        default: "CRITICAL,HIGH"
        description: Severities of vulnerabilities to fail the build
      trivy-severity-for-sarif:
        type: string
        default: "CRITICAL,HIGH"
        description: "Severities of vulnerabilities in SARIF report"
      trivy-limit-severities-for-sarif:
        type: boolean
        default: true
        description: Limit severities for SARIF format
      python-version:
        type: string
        default: "3.11"
        description: Python version to use
      poetry-version:
        type: string
        description: "Poetry version to use"
        default: "1.8.5"
      runs-on:
        type: string
        description: "Overrides jobs runs-on settings (json-encoded list)"
        default: '["ubuntu-24.04"]'
        required: false

jobs:
  test:
    uses: ./.github/workflows/python_package_test.yml
    with:
      bypass-checks: ${{ inputs.bypass-checks }}
      style-checks-enabled: ${{ inputs.style-checks-enabled }}
      style-checks-bypassed: ${{ inputs.style-checks-bypassed }}
      code-checks-enabled: ${{ inputs.code-checks-enabled }}
      code-checks-bypassed: ${{ inputs.code-checks-bypassed }}
      code-checks-python-versions: ${{ inputs.code-checks-python-versions }}
      ort-enabled: ${{ inputs.ort-enabled }}
      ort-bypassed: ${{ inputs.ort-bypassed }}
      ort-version: ${{ inputs.ort-version }}
      trivy-enabled: ${{ inputs.trivy-enabled }}
      trivy-bypassed: ${{ inputs.trivy-bypassed }}
      trivy-severity: ${{ inputs.trivy-severity }}
      trivy-severity-for-sarif: ${{ inputs.trivy-severity-for-sarif }}
      trivy-limit-severities-for-sarif: ${{ inputs.trivy-limit-severities-for-sarif }}
      python-version: ${{ inputs.python-version }}
      runs-on: ${{ inputs.runs-on }}

  calculate_version:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    outputs:
      next-version-without-hyphens: ${{ steps.semantic_versioning.outputs.next-version-without-hyphens }}
      latest-tag: ${{ steps.semantic_versioning.outputs.latest-tag }}
    steps:
      - uses: epam/ai-dial-ci/actions/semantic_versioning@2.2.0
        id: semantic_versioning

  release:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    permissions:
      contents: write
      packages: write
      security-events: write
    needs:
      - calculate_version
      - test
    steps:
      - uses: epam/ai-dial-ci/actions/generate_release_notes@2.2.0
        with:
          latest-tag: ${{ needs.calculate_version.outputs.latest-tag }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
      - uses: epam/ai-dial-ci/actions/python_prepare@2.2.0
        with:
          python-version: ${{ inputs.python-version }}
          poetry-version: ${{ inputs.poetry-version }}
      - name: Set version
        shell: bash
        run: |
          sed -i "s/^version = .*/version = \"${{ needs.calculate_version.outputs.next-version-without-hyphens }}\"/g" pyproject.toml
      - name: Publish to pypi
        shell: bash
        run: |
          make build
          make publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      - uses: epam/ai-dial-ci/actions/publish_tag_release@2.2.0
        with:
          tag-version: ${{ needs.calculate_version.outputs.next-version-without-hyphens }}
          changelog-file: "/tmp/my_changelog" # comes from generate_release_notes step; TODO: beautify
          artifacts: "dist/*"
          extra-commit-command: |
            git add pyproject.toml
            git commit -m '[skip ci] Update version' || true # upstream branch may already be updated
