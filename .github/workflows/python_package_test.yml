name: Python Package tests

on:
  workflow_call:
    inputs:
      bypass-checks:
        type: boolean
        default: false
        description: Do not fail pipeline if checks failed
      style-checks-enabled:
        type: boolean
        default: true
        description: Enable style_checks
      style-checks-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if style_checks failed
      code-checks-enabled:
        type: boolean
        default: true
        description: Enable code_checks
      code-checks-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if code_checks failed
      code-checks-python-versions:
        type: string
        description: Python versions to run tests against
        default: '["3.8", "3.9", "3.10", "3.11"]'
      trivy-enabled:
        type: boolean
        default: true
        description: Enable Trivy scanning
      trivy-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if Trivy failed
      trivy-severity:
        type: string
        default: "CRITICAL,HIGH"
        description: Severities of vulnerabilities to fail the build
      trivy-severity-for-sarif:
        type: string
        default: "CRITICAL,HIGH"
        description: "Severities of vulnerabilities in SARIF report"
      trivy-limit-severities-for-sarif:
        type: boolean
        default: true
        description: Limit severities for SARIF format
      trivy-vuln-type:
        description: "Type of vulnerabilities to scan"
        type: string
        default: "os,library"
      trivy-ignore-unfixed:
        type: boolean
        description: "Ignore unpatched/unfixed vulnerabilities"
        default: true
      ort-enabled:
        type: boolean
        default: true
        description: Enable ORT scanning
      ort-bypassed:
        type: boolean
        default: false
        description: Do not fail pipeline if ORT scan failed
      ort-version:
        type: string
        default: "latest"
        description: ORT version to use
      python-version:
        type: string
        default: "3.11"
        description: Python version to use
      poetry-version:
        type: string
        description: "Poetry version to use"
        default: "latest"
      runs-on:
        type: string
        description: "Overrides jobs runs-on settings (json-encoded list)"
        default: '["ubuntu-24.04"]'
        required: false

jobs:
  style_checks:
    if: ${{ inputs.style-checks-enabled }}
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
      - uses: epam/ai-dial-ci/actions/python_prepare@2.4.1
        with:
          python-version: ${{ inputs.python-version }}
          poetry-version: ${{ inputs.poetry-version }}
      - name: Test
        continue-on-error: ${{ inputs.bypass-checks || inputs.style-checks-bypassed }}
        shell: bash
        run: |
          make lint

  code_checks:
    if: ${{ inputs.code-checks-enabled }}
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.code-checks-python-versions) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
      - uses: epam/ai-dial-ci/actions/python_prepare@2.4.1
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ inputs.poetry-version }}
      - name: Test
        continue-on-error: ${{ inputs.bypass-checks || inputs.code-checks-bypassed }}
        shell: bash
        run: |
          # Workflow explanation:
          # 1. Use venv from python_prepare action and build the package(s)
          # 2. Create a separate venv for twine, install and check the package(s)
          # 3. Switch back to the original venv and run tests
          source $VENV
          make build
          deactivate

          python -m venv .venv-twine
          source .venv-twine/bin/activate
          pip install "twine~=6.0"
          twine check dist/*
          deactivate

          source $VENV
          make test PYTHON=${{ matrix.python-version }}

  ort:
    if: ${{ inputs.ort-enabled }}
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
      - uses: oss-review-toolkit/ort-ci-github-action@9acdf1e56f1b42972b12274ae56c35bf70a5f65b # v1.0.1
        env:
          CONTINUE_ON_ERROR: ${{ inputs.bypass-checks || inputs.ort-bypassed }} # Hack to use the input below as a boolean
        with:
          image: "ghcr.io/oss-review-toolkit/ort:${{ inputs.ort-version }}"
          allow-dynamic-versions: "true"
          fail-on: "violations"
          ort-cli-args: "-P ort.forceOverwrite=true --stacktrace -P ort.analyzer.enabledPackageManagers=Poetry"
        continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}

  trivy:
    if: ${{ inputs.trivy-enabled }}
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      - name: Run Trivy vulnerability scanner (SARIF, no fail)
        id: trivy-sarif
        # Do not perform SARIF scan on private repos - GitHub Advanced Security is not enabled
        if: ${{ !github.event.repository.private }}
        uses: aquasecurity/trivy-action@7aca5acc9500b463826cc47a47a65ad7d404b045 # TODO: v0.31.0+
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "0"
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          vuln-type: ${{ inputs.trivy-vuln-type }}
          severity: ${{ inputs.trivy-severity-for-sarif }}
          limit-severities-for-sarif: ${{ inputs.trivy-limit-severities-for-sarif }}
        env:
          TRIVY_DISABLE_VEX_NOTICE: true
        continue-on-error: true # HACK: Alongside with `exit-code: 0`, ensure not failing the workflow
      - name: Upload Trivy scan results to GitHub Security tab
        # Do not upload SARIF reports on private repos - GitHub Advanced Security is not enabled
        if: ${{ !cancelled() && inputs.trivy-enabled && !github.event.repository.private }}
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b #v3.28.17
        with:
          sarif_file: "trivy-results.sarif"
          category: trivy
        continue-on-error: ${{ inputs.trivy-bypassed }}
      - name: Run Trivy vulnerability scanner (stdout, table view, may fail)
        uses: aquasecurity/trivy-action@7aca5acc9500b463826cc47a47a65ad7d404b045 # TODO: v0.31.0+
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          vuln-type: ${{ inputs.trivy-vuln-type }}
          severity: ${{ inputs.trivy-severity }}
          skip-setup-trivy: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
        env:
          TRIVY_SKIP_DB_UPDATE: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
          TRIVY_SKIP_JAVA_DB_UPDATE: ${{ steps.trivy-sarif.conclusion != 'skipped' }}
          TRIVY_DISABLE_VEX_NOTICE: true
        continue-on-error: ${{ inputs.trivy-bypassed }}
